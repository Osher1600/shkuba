<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;&#10;    id(&quot;com.google.gms.google-services&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.dinari.shkuba&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.dinari.shkuba&quot;&#10;        minSdk = 29&#10;        targetSdk = 34&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;&#10;        ndk {&#10;            abiFilters += listOf(&quot;arm64-v8a&quot;, &quot;armeabi-v7a&quot;, &quot;x86&quot;, &quot;x86_64&quot;)&#10;        }&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = &quot;1.5.1&quot;&#10;    }&#10;    externalNativeBuild {&#10;        cmake {&#10;            path = file(&quot;src/main/cpp/CMakeLists.txt&quot;)&#10;            version = &quot;3.22.1&quot;&#10;        }&#10;    }&#10;    ndkVersion = &quot;25.2.9519653&quot;&#10;&#10;    sourceSets {&#10;        getByName(&quot;main&quot;) {&#10;            jniLibs.srcDirs(&quot;src/main/jniLibs&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.firebase.auth)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;&#10;}&#10;apply(plugin = &quot;com.google.gms.google-services&quot;)" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;&#10;    id(&quot;com.google.gms.google-services&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.dinari.shkuba&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.dinari.shkuba&quot;&#10;        minSdk = 29&#10;        targetSdk = 34&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;&#10;        ndk {&#10;            abiFilters += listOf(&quot;arm64-v8a&quot;, &quot;armeabi-v7a&quot;, &quot;x86&quot;, &quot;x86_64&quot;)&#10;        }&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = &quot;1.5.1&quot;&#10;    }&#10;    externalNativeBuild {&#10;        cmake {&#10;            path = file(&quot;src/main/cpp/CMakeLists.txt&quot;)&#10;            version = &quot;3.22.1&quot;&#10;        }&#10;    }&#10;    ndkVersion = &quot;25.2.9519653&quot;&#10;&#10;    sourceSets {&#10;        getByName(&quot;main&quot;) {&#10;            jniLibs.srcDirs(&quot;src/main/jniLibs&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(platform(libs.firebase.bom))&#10;    implementation(libs.firebase.firestore)&#10;    implementation(libs.firebase.auth)&#10;    implementation(&quot;com.google.firebase:firebase-database-ktx:20.2.2&quot;)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;&#10;}&#10;apply(plugin = &quot;com.google.gms.google-services&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/cpp/CMakeLists.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/cpp/CMakeLists.txt" />
              <option name="originalContent" value="cmake_minimum_required(VERSION 3.18.1)&#10;&#10;project(&quot;shkuba&quot;)&#10;&#10;        ./logic/round.cpp&#10;    native-lib&#10;        ./logic/deck.cpp&#10;        ./logic/board.cpp&#10;        ./logic/round.cpp&#10;        ./logic/card.cpp&#10;        ./logic/deck.cpp&#10;        ./logic/hand.cpp&#10;        ./logic/pile.cpp&#10;        ./shkuba_jni.cpp&#10;    log&#10;)&#10;target_link_libraries(&#10;    native-lib&#10;    ${log-lib}&#10;)&#10;" />
              <option name="updatedContent" value="cmake_minimum_required(VERSION 3.18.1)&#10;&#10;project(&quot;shkuba&quot;)&#10;&#10;# Add include directories&#10;include_directories(${CMAKE_CURRENT_SOURCE_DIR}/logic)&#10;&#10;# Create the shared library&#10;add_library(&#10;    shkuba&#10;    SHARED&#10;    shkuba_jni.cpp&#10;    logic/board.cpp&#10;    logic/round.cpp&#10;    logic/card.cpp&#10;    logic/deck.cpp&#10;    logic/hand.cpp&#10;    logic/pile.cpp&#10;)&#10;&#10;# Find required libraries&#10;find_library(&#10;    log-lib&#10;    log&#10;)&#10;&#10;# Link libraries&#10;target_link_libraries(&#10;    shkuba&#10;    ${log-lib}&#10;)&#10;&#10;# Set C++ standard&#10;set_target_properties(shkuba PROPERTIES&#10;    CXX_STANDARD 17&#10;    CXX_STANDARD_REQUIRED ON&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/cpp/shkuba_jni.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/cpp/shkuba_jni.cpp" />
              <option name="originalContent" value="#include &lt;jni.h&gt;&#10;#include &lt;android/log.h&gt;&#10;#include &quot;board.h&quot;&#10;#include &quot;card.h&quot;&#10;#include &quot;deck.h&quot;&#10;#include &quot;hand.h&quot;&#10;#include &quot;round.h&quot;&#10;&#10;#define LOG_TAG &quot;ShkubaJNI&quot;&#10;#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)&#10;#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)&#10;&#10;extern &quot;C&quot; {&#10;&#10;// Board JNI Methods&#10;JNIEXPORT jlong JNICALL Java_com_dinari_shkuba_Board_nativeCreate(JNIEnv* env, jobject thiz) {&#10;    try {&#10;        Board* board = new Board();&#10;        LOGI(&quot;Board created successfully&quot;);&#10;        return reinterpret_cast&lt;jlong&gt;(board);&#10;    } catch (const std::exception&amp; e) {&#10;        LOGE(&quot;Error creating Board: %s&quot;, e.what());&#10;        return 0;&#10;    }&#10;}&#10;&#10;JNIEXPORT void JNICALL Java_com_dinari_shkuba_Board_nativeDestroy(JNIEnv* env, jobject thiz, jlong handle) {&#10;    Board* board = reinterpret_cast&lt;Board*&gt;(handle);&#10;    if (board) {&#10;        delete board;&#10;        LOGI(&quot;Board destroyed successfully&quot;);&#10;    }&#10;}&#10;&#10;JNIEXPORT jint JNICALL Java_com_dinari_shkuba_Board_getBoardSize(JNIEnv* env, jobject thiz) {&#10;    jclass cls = env-&gt;GetObjectClass(thiz);&#10;    jfieldID handleField = env-&gt;GetFieldID(cls, &quot;nativeHandle&quot;, &quot;J&quot;);&#10;    jlong handle = env-&gt;GetLongField(thiz, handleField);&#10;    Board* board = reinterpret_cast&lt;Board*&gt;(handle);&#10;    if (board) {&#10;        return static_cast&lt;jint&gt;(board-&gt;getBoardSize());&#10;    }&#10;    return 0;&#10;}&#10;&#10;JNIEXPORT void JNICALL Java_com_dinari_shkuba_Board_addToBoard(JNIEnv* env, jobject thiz, jint suit, jint rank) {&#10;    jclass cls = env-&gt;GetObjectClass(thiz);&#10;    jfieldID handleField = env-&gt;GetFieldID(cls, &quot;nativeHandle&quot;, &quot;J&quot;);&#10;    jlong handle = env-&gt;GetLongField(thiz, handleField);&#10;    Board* board = reinterpret_cast&lt;Board*&gt;(handle);&#10;    if (board) {&#10;        Card card(static_cast&lt;Card::suit&gt;(suit), rank);&#10;        board-&gt;addToBoard(card);&#10;    }&#10;}&#10;&#10;JNIEXPORT jintArray JNICALL Java_com_dinari_shkuba_Board_getBoard(JNIEnv* env, jobject thiz) {&#10;    jclass cls = env-&gt;GetObjectClass(thiz);&#10;    jfieldID handleField = env-&gt;GetFieldID(cls, &quot;nativeHandle&quot;, &quot;J&quot;);&#10;    jlong handle = env-&gt;GetLongField(thiz, handleField);&#10;    Board* board = reinterpret_cast&lt;Board*&gt;(handle);&#10;&#10;    if (board) {&#10;        std::vector&lt;Card&gt; cards = board-&gt;getBoard();&#10;        jintArray result = env-&gt;NewIntArray(cards.size() * 2);&#10;        jint* elements = env-&gt;GetIntArrayElements(result, nullptr);&#10;&#10;        for (size_t i = 0; i &lt; cards.size(); i++) {&#10;            elements[i * 2] = static_cast&lt;jint&gt;(cards[i].getSuit());&#10;            elements[i * 2 + 1] = static_cast&lt;jint&gt;(cards[i].getRank());&#10;        }&#10;&#10;        env-&gt;ReleaseIntArrayElements(result, elements, 0);&#10;        return result;&#10;    }&#10;    return env-&gt;NewIntArray(0);&#10;}&#10;&#10;// Card JNI Methods&#10;JNIEXPORT jlong JNICALL Java_com_dinari_shkuba_Card_nativeCreate(JNIEnv* env, jobject thiz, jint suit, jint rank) {&#10;    try {&#10;        Card* card = new Card(static_cast&lt;Card::suit&gt;(suit), rank);&#10;        return reinterpret_cast&lt;jlong&gt;(card);&#10;    } catch (const std::exception&amp; e) {&#10;        LOGE(&quot;Error creating Card: %s&quot;, e.what());&#10;        return 0;&#10;    }&#10;}&#10;&#10;JNIEXPORT void JNICALL Java_com_dinari_shkuba_Card_nativeDestroy(JNIEnv* env, jobject thiz, jlong handle) {&#10;    Card* card = reinterpret_cast&lt;Card*&gt;(handle);&#10;    if (card) {&#10;        delete card;&#10;    }&#10;}&#10;&#10;JNIEXPORT jint JNICALL Java_com_dinari_shkuba_Card_getSuit(JNIEnv* env, jobject thiz) {&#10;    jclass cls = env-&gt;GetObjectClass(thiz);&#10;    jfieldID handleField = env-&gt;GetFieldID(cls, &quot;nativeHandle&quot;, &quot;J&quot;);&#10;    jlong handle = env-&gt;GetLongField(thiz, handleField);&#10;    Card* card = reinterpret_cast&lt;Card*&gt;(handle);&#10;    if (card) {&#10;        return static_cast&lt;jint&gt;(card-&gt;getSuit());&#10;    }&#10;    return -1;&#10;}&#10;&#10;JNIEXPORT jint JNICALL Java_com_dinari_shkuba_Card_getRank(JNIEnv* env, jobject thiz) {&#10;    jclass cls = env-&gt;GetObjectClass(thiz);&#10;    jfieldID handleField = env-&gt;GetFieldID(cls, &quot;nativeHandle&quot;, &quot;J&quot;);&#10;    jlong handle = env-&gt;GetLongField(thiz, handleField);&#10;    Card* card = reinterpret_cast&lt;Card*&gt;(handle);&#10;    if (card) {&#10;        return static_cast&lt;jint&gt;(card-&gt;getRank());&#10;    }&#10;    return -1;&#10;}&#10;&#10;// Deck JNI Methods&#10;JNIEXPORT jlong JNICALL Java_com_dinari_shkuba_Deck_nativeCreate(JNIEnv* env, jobject thiz) {&#10;    try {&#10;        Deck* deck = new Deck();&#10;        return reinterpret_cast&lt;jlong&gt;(deck);&#10;    } catch (const std::exception&amp; e) {&#10;        LOGE(&quot;Error creating Deck: %s&quot;, e.what());&#10;        return 0;&#10;    }&#10;}&#10;&#10;JNIEXPORT void JNICALL Java_com_dinari_shkuba_Deck_nativeDestroy(JNIEnv* env, jobject thiz, jlong handle) {&#10;    Deck* deck = reinterpret_cast&lt;Deck*&gt;(handle);&#10;    if (deck) {&#10;        delete deck;&#10;    }&#10;}&#10;&#10;JNIEXPORT void JNICALL Java_com_dinari_shkuba_Deck_shuffle(JNIEnv* env, jobject thiz) {&#10;    jclass cls = env-&gt;GetObjectClass(thiz);&#10;    jfieldID handleField = env-&gt;GetFieldID(cls, &quot;nativeHandle&quot;, &quot;J&quot;);&#10;    jlong handle = env-&gt;GetLongField(thiz, handleField);&#10;    Deck* deck = reinterpret_cast&lt;Deck*&gt;(handle);&#10;    if (deck) {&#10;        deck-&gt;shuffleDeck();&#10;    }&#10;}&#10;&#10;JNIEXPORT jintArray JNICALL Java_com_dinari_shkuba_Deck_dealCard(JNIEnv* env, jobject thiz) {&#10;    jclass cls = env-&gt;GetObjectClass(thiz);&#10;    jfieldID handleField = env-&gt;GetFieldID(cls, &quot;nativeHandle&quot;, &quot;J&quot;);&#10;    jlong handle = env-&gt;GetLongField(thiz, handleField);&#10;    Deck* deck = reinterpret_cast&lt;Deck*&gt;(handle);&#10;&#10;    if (deck) {&#10;        try {&#10;            Card card = deck-&gt;draw();&#10;            jintArray result = env-&gt;NewIntArray(2);&#10;            jint cardData[2] = {static_cast&lt;jint&gt;(card.getSuit()), static_cast&lt;jint&gt;(card.getRank())};&#10;            env-&gt;SetIntArrayRegion(result, 0, 2, cardData);&#10;            return result;&#10;        } catch (const std::exception&amp; e) {&#10;            LOGE(&quot;Error dealing card: %s&quot;, e.what());&#10;            return env-&gt;NewIntArray(0);&#10;        }&#10;    }&#10;    return env-&gt;NewIntArray(0);&#10;}&#10;&#10;// Hand JNI Methods&#10;JNIEXPORT jlong JNICALL Java_com_dinari_shkuba_Hand_nativeCreate(JNIEnv* env, jobject thiz) {&#10;    try {&#10;        Hand* hand = new Hand();&#10;        return reinterpret_cast&lt;jlong&gt;(hand);&#10;    } catch (const std::exception&amp; e) {&#10;        LOGE(&quot;Error creating Hand: %s&quot;, e.what());&#10;        return 0;&#10;    }&#10;}&#10;&#10;JNIEXPORT void JNICALL Java_com_dinari_shkuba_Hand_nativeDestroy(JNIEnv* env, jobject thiz, jlong handle) {&#10;    Hand* hand = reinterpret_cast&lt;Hand*&gt;(handle);&#10;    if (hand) {&#10;        delete hand;&#10;    }&#10;}&#10;&#10;JNIEXPORT void JNICALL Java_com_dinari_shkuba_Hand_addCard(JNIEnv* env, jobject thiz, jint suit, jint rank) {&#10;    jclass cls = env-&gt;GetObjectClass(thiz);&#10;    jfieldID handleField = env-&gt;GetFieldID(cls, &quot;nativeHandle&quot;, &quot;J&quot;);&#10;    jlong handle = env-&gt;GetLongField(thiz, handleField);&#10;    Hand* hand = reinterpret_cast&lt;Hand*&gt;(handle);&#10;    if (hand) {&#10;        Card card(static_cast&lt;Card::suit&gt;(suit), rank);&#10;        hand-&gt;addToHand(card);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="#include &lt;jni.h&gt;&#10;#include &lt;android/log.h&gt;&#10;#include &quot;board.h&quot;&#10;#include &quot;card.h&quot;&#10;#include &quot;deck.h&quot;&#10;#include &quot;hand.h&quot;&#10;#include &quot;round.h&quot;&#10;&#10;#define LOG_TAG &quot;ShkubaJNI&quot;&#10;#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)&#10;#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)&#10;&#10;extern &quot;C&quot; {&#10;&#10;// Board JNI Methods&#10;JNIEXPORT jlong JNICALL Java_com_dinari_shkuba_Board_nativeCreate(JNIEnv* env, jobject thiz) {&#10;    try {&#10;        Board* board = new Board();&#10;        LOGI(&quot;Board created successfully&quot;);&#10;        return reinterpret_cast&lt;jlong&gt;(board);&#10;    } catch (const std::exception&amp; e) {&#10;        LOGE(&quot;Error creating Board: %s&quot;, e.what());&#10;        return 0;&#10;    }&#10;}&#10;&#10;JNIEXPORT void JNICALL Java_com_dinari_shkuba_Board_nativeDestroy(JNIEnv* env, jobject thiz, jlong handle) {&#10;    Board* board = reinterpret_cast&lt;Board*&gt;(handle);&#10;    if (board) {&#10;        delete board;&#10;        LOGI(&quot;Board destroyed successfully&quot;);&#10;    }&#10;}&#10;&#10;JNIEXPORT jint JNICALL Java_com_dinari_shkuba_Board_getBoardSize(JNIEnv* env, jobject thiz) {&#10;    jclass cls = env-&gt;GetObjectClass(thiz);&#10;    jfieldID handleField = env-&gt;GetFieldID(cls, &quot;nativeHandle&quot;, &quot;J&quot;);&#10;    jlong handle = env-&gt;GetLongField(thiz, handleField);&#10;    Board* board = reinterpret_cast&lt;Board*&gt;(handle);&#10;    if (board) {&#10;        return static_cast&lt;jint&gt;(board-&gt;getBoardSize());&#10;    }&#10;    return 0;&#10;}&#10;&#10;JNIEXPORT void JNICALL Java_com_dinari_shkuba_Board_addToBoard(JNIEnv* env, jobject thiz, jint suit, jint rank) {&#10;    jclass cls = env-&gt;GetObjectClass(thiz);&#10;    jfieldID handleField = env-&gt;GetFieldID(cls, &quot;nativeHandle&quot;, &quot;J&quot;);&#10;    jlong handle = env-&gt;GetLongField(thiz, handleField);&#10;    Board* board = reinterpret_cast&lt;Board*&gt;(handle);&#10;    if (board) {&#10;        Card card(static_cast&lt;Card::suit&gt;(suit), rank);&#10;        board-&gt;addToBoard(card);&#10;    }&#10;}&#10;&#10;JNIEXPORT jintArray JNICALL Java_com_dinari_shkuba_Board_getBoard(JNIEnv* env, jobject thiz) {&#10;    jclass cls = env-&gt;GetObjectClass(thiz);&#10;    jfieldID handleField = env-&gt;GetFieldID(cls, &quot;nativeHandle&quot;, &quot;J&quot;);&#10;    jlong handle = env-&gt;GetLongField(thiz, handleField);&#10;    Board* board = reinterpret_cast&lt;Board*&gt;(handle);&#10;&#10;    if (board) {&#10;        std::vector&lt;Card&gt; cards = board-&gt;getBoard();&#10;        jintArray result = env-&gt;NewIntArray(cards.size() * 2);&#10;        jint* elements = env-&gt;GetIntArrayElements(result, nullptr);&#10;&#10;        for (size_t i = 0; i &lt; cards.size(); i++) {&#10;            elements[i * 2] = static_cast&lt;jint&gt;(cards[i].getSuit());&#10;            elements[i * 2 + 1] = static_cast&lt;jint&gt;(cards[i].getRank());&#10;        }&#10;&#10;        env-&gt;ReleaseIntArrayElements(result, elements, 0);&#10;        return result;&#10;    }&#10;    return env-&gt;NewIntArray(0);&#10;}&#10;&#10;// Card JNI Methods&#10;JNIEXPORT jlong JNICALL Java_com_dinari_shkuba_Card_nativeCreate(JNIEnv* env, jobject thiz, jint suit, jint rank) {&#10;    try {&#10;        Card* card = new Card(static_cast&lt;Card::suit&gt;(suit), rank);&#10;        return reinterpret_cast&lt;jlong&gt;(card);&#10;    } catch (const std::exception&amp; e) {&#10;        LOGE(&quot;Error creating Card: %s&quot;, e.what());&#10;        return 0;&#10;    }&#10;}&#10;&#10;JNIEXPORT void JNICALL Java_com_dinari_shkuba_Card_nativeDestroy(JNIEnv* env, jobject thiz, jlong handle) {&#10;    Card* card = reinterpret_cast&lt;Card*&gt;(handle);&#10;    if (card) {&#10;        delete card;&#10;    }&#10;}&#10;&#10;JNIEXPORT jint JNICALL Java_com_dinari_shkuba_Card_getSuit(JNIEnv* env, jobject thiz) {&#10;    jclass cls = env-&gt;GetObjectClass(thiz);&#10;    jfieldID handleField = env-&gt;GetFieldID(cls, &quot;nativeHandle&quot;, &quot;J&quot;);&#10;    jlong handle = env-&gt;GetLongField(thiz, handleField);&#10;    Card* card = reinterpret_cast&lt;Card*&gt;(handle);&#10;    if (card) {&#10;        return static_cast&lt;jint&gt;(card-&gt;getSuit());&#10;    }&#10;    return -1;&#10;}&#10;&#10;JNIEXPORT jint JNICALL Java_com_dinari_shkuba_Card_getRank(JNIEnv* env, jobject thiz) {&#10;    jclass cls = env-&gt;GetObjectClass(thiz);&#10;    jfieldID handleField = env-&gt;GetFieldID(cls, &quot;nativeHandle&quot;, &quot;J&quot;);&#10;    jlong handle = env-&gt;GetLongField(thiz, handleField);&#10;    Card* card = reinterpret_cast&lt;Card*&gt;(handle);&#10;    if (card) {&#10;        return static_cast&lt;jint&gt;(card-&gt;getRank());&#10;    }&#10;    return -1;&#10;}&#10;&#10;// Deck JNI Methods&#10;JNIEXPORT jlong JNICALL Java_com_dinari_shkuba_Deck_nativeCreate(JNIEnv* env, jobject thiz) {&#10;    try {&#10;        Deck* deck = new Deck();&#10;        return reinterpret_cast&lt;jlong&gt;(deck);&#10;    } catch (const std::exception&amp; e) {&#10;        LOGE(&quot;Error creating Deck: %s&quot;, e.what());&#10;        return 0;&#10;    }&#10;}&#10;&#10;JNIEXPORT void JNICALL Java_com_dinari_shkuba_Deck_nativeDestroy(JNIEnv* env, jobject thiz, jlong handle) {&#10;    Deck* deck = reinterpret_cast&lt;Deck*&gt;(handle);&#10;    if (deck) {&#10;        delete deck;&#10;    }&#10;}&#10;&#10;JNIEXPORT void JNICALL Java_com_dinari_shkuba_Deck_shuffle(JNIEnv* env, jobject thiz) {&#10;    jclass cls = env-&gt;GetObjectClass(thiz);&#10;    jfieldID handleField = env-&gt;GetFieldID(cls, &quot;nativeHandle&quot;, &quot;J&quot;);&#10;    jlong handle = env-&gt;GetLongField(thiz, handleField);&#10;    Deck* deck = reinterpret_cast&lt;Deck*&gt;(handle);&#10;    if (deck) {&#10;        deck-&gt;shuffleDeck();&#10;    }&#10;}&#10;&#10;JNIEXPORT jintArray JNICALL Java_com_dinari_shkuba_Deck_dealCard(JNIEnv* env, jobject thiz) {&#10;    jclass cls = env-&gt;GetObjectClass(thiz);&#10;    jfieldID handleField = env-&gt;GetFieldID(cls, &quot;nativeHandle&quot;, &quot;J&quot;);&#10;    jlong handle = env-&gt;GetLongField(thiz, handleField);&#10;    Deck* deck = reinterpret_cast&lt;Deck*&gt;(handle);&#10;&#10;    if (deck) {&#10;        try {&#10;            Card card = deck-&gt;draw();&#10;            jintArray result = env-&gt;NewIntArray(2);&#10;            jint cardData[2] = {static_cast&lt;jint&gt;(card.getSuit()), static_cast&lt;jint&gt;(card.getRank())};&#10;            env-&gt;SetIntArrayRegion(result, 0, 2, cardData);&#10;            return result;&#10;        } catch (const std::exception&amp; e) {&#10;            LOGE(&quot;Error dealing card: %s&quot;, e.what());&#10;            return env-&gt;NewIntArray(0);&#10;        }&#10;    }&#10;    return env-&gt;NewIntArray(0);&#10;}&#10;&#10;// Hand JNI Methods&#10;JNIEXPORT jlong JNICALL Java_com_dinari_shkuba_Hand_nativeCreate(JNIEnv* env, jobject thiz) {&#10;    try {&#10;        Hand* hand = new Hand();&#10;        return reinterpret_cast&lt;jlong&gt;(hand);&#10;    } catch (const std::exception&amp; e) {&#10;        LOGE(&quot;Error creating Hand: %s&quot;, e.what());&#10;        return 0;&#10;    }&#10;}&#10;&#10;JNIEXPORT void JNICALL Java_com_dinari_shkuba_Hand_nativeDestroy(JNIEnv* env, jobject thiz, jlong handle) {&#10;    Hand* hand = reinterpret_cast&lt;Hand*&gt;(handle);&#10;    if (hand) {&#10;        delete hand;&#10;    }&#10;}&#10;&#10;JNIEXPORT void JNICALL Java_com_dinari_shkuba_Hand_addCard(JNIEnv* env, jobject thiz, jint suit, jint rank) {&#10;    jclass cls = env-&gt;GetObjectClass(thiz);&#10;    jfieldID handleField = env-&gt;GetFieldID(cls, &quot;nativeHandle&quot;, &quot;J&quot;);&#10;    jlong handle = env-&gt;GetLongField(thiz, handleField);&#10;    Hand* hand = reinterpret_cast&lt;Hand*&gt;(handle);&#10;    if (hand) {&#10;        Card card(static_cast&lt;Card::suit&gt;(suit), rank);&#10;        hand-&gt;addToHand(card);&#10;    }&#10;}&#10;&#10;// NativeCard JNI Methods&#10;JNIEXPORT jlong JNICALL Java_com_dinari_shkuba_NativeCard_nativeCreate(JNIEnv* env, jobject thiz, jint suit, jint rank) {&#10;    try {&#10;        Card* card = new Card(static_cast&lt;Card::suit&gt;(suit), rank);&#10;        return reinterpret_cast&lt;jlong&gt;(card);&#10;    } catch (const std::exception&amp; e) {&#10;        __android_log_print(ANDROID_LOG_ERROR, &quot;ShkubaJNI&quot;, &quot;Error creating NativeCard: %s&quot;, e.what());&#10;        return 0;&#10;    }&#10;}&#10;&#10;JNIEXPORT void JNICALL Java_com_dinari_shkuba_NativeCard_nativeDestroy(JNIEnv* env, jobject thiz, jlong handle) {&#10;    Card* card = reinterpret_cast&lt;Card*&gt;(handle);&#10;    if (card) {&#10;        delete card;&#10;    }&#10;}&#10;&#10;JNIEXPORT jint JNICALL Java_com_dinari_shkuba_NativeCard_nativeGetSuit(JNIEnv* env, jobject thiz) {&#10;    jclass cls = env-&gt;GetObjectClass(thiz);&#10;    jfieldID handleField = env-&gt;GetFieldID(cls, &quot;nativeHandle&quot;, &quot;J&quot;);&#10;    jlong handle = env-&gt;GetLongField(thiz, handleField);&#10;    Card* card = reinterpret_cast&lt;Card*&gt;(handle);&#10;    if (card) {&#10;        return static_cast&lt;jint&gt;(card-&gt;getSuit());&#10;    }&#10;    return -1;&#10;}&#10;&#10;JNIEXPORT jint JNICALL Java_com_dinari_shkuba_NativeCard_nativeGetRank(JNIEnv* env, jobject thiz) {&#10;    jclass cls = env-&gt;GetObjectClass(thiz);&#10;    jfieldID handleField = env-&gt;GetFieldID(cls, &quot;nativeHandle&quot;, &quot;J&quot;);&#10;    jlong handle = env-&gt;GetLongField(thiz, handleField);&#10;    Card* card = reinterpret_cast&lt;Card*&gt;(handle);&#10;    if (card) {&#10;        return card-&gt;getRank();&#10;    }&#10;    return -1;&#10;}&#10;&#10;} // extern &quot;C&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/dinari/shkuba/Card.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/dinari/shkuba/Card.kt" />
              <option name="originalContent" value="package com.dinari.shkuba&#10;&#10;class NativeCard(suit: Int, rank: Int) {&#10;    // Native pointer to the C++ Card instance&#10;    private var nativeHandle: Long = 0&#10;&#10;    init {&#10;        nativeHandle = nativeCreate(suit, rank)&#10;    }&#10;&#10;    // Secondary constructor for convenience&#10;    constructor(suit: Suit, rank: Int) : this(suit.ordinal, rank)&#10;&#10;    // JNI: Create C++ Card instance&#10;    private external fun nativeCreate(suit: Int, rank: Int): Long&#10;&#10;    // JNI: Clean up C++ Card instance&#10;    private external fun nativeDestroy(handle: Long)&#10;&#10;    // JNI: Get card suit&#10;    private external fun nativeGetSuit(): Int&#10;&#10;    // JNI: Get card rank&#10;    private external fun nativeGetRank(): Int&#10;&#10;    fun getSuit(): Int = nativeGetSuit()&#10;    fun getRank(): Int = nativeGetRank()&#10;&#10;    // Helper functions for Kotlin convenience&#10;    fun getSuitEnum(): Suit = Suit.values()[getSuit()]&#10;&#10;    override fun toString(): String = &quot;${getSuitEnum().name}${getRank()}&quot;&#10;&#10;    override fun equals(other: Any?): Boolean {&#10;        if (this === other) return true&#10;        if (other !is NativeCard) return false&#10;        return this.getSuit() == other.getSuit() &amp;&amp; this.getRank() == other.getRank()&#10;    }&#10;&#10;    override fun hashCode(): Int = getSuit() * 31 + getRank()&#10;&#10;    protected fun finalize() {&#10;        if (nativeHandle != 0L) {&#10;            nativeDestroy(nativeHandle)&#10;            nativeHandle = 0L&#10;        }&#10;    }&#10;&#10;    enum class Suit {&#10;        SPADES,   // S = 0&#10;        HEARTS,   // H = 1&#10;        DIAMONDS, // D = 2&#10;        CLUBS     // C = 3&#10;    }&#10;&#10;    companion object {&#10;        init {&#10;            System.loadLibrary(&quot;shkuba&quot;)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.dinari.shkuba&#10;&#10;class NativeCard(suit: Int, rank: Int) {&#10;    // Native pointer to the C++ Card instance&#10;    private var nativeHandle: Long = 0&#10;&#10;    init {&#10;        nativeHandle = nativeCreate(suit, rank)&#10;    }&#10;&#10;    // Secondary constructor for convenience&#10;    constructor(suit: Suit, rank: Int) : this(suit.ordinal, rank)&#10;&#10;    // JNI: Create C++ Card instance&#10;    private external fun nativeCreate(suit: Int, rank: Int): Long&#10;&#10;    // JNI: Clean up C++ Card instance&#10;    private external fun nativeDestroy(handle: Long)&#10;&#10;    // JNI: Get card suit&#10;    private external fun nativeGetSuit(): Int&#10;&#10;    // JNI: Get card rank&#10;    private external fun nativeGetRank(): Int&#10;&#10;    fun getSuit(): Int = nativeGetSuit()&#10;    fun getRank(): Int = nativeGetRank()&#10;&#10;    // Helper functions for Kotlin convenience&#10;    fun getSuitEnum(): Suit = Suit.entries[getSuit()]&#10;&#10;    override fun toString(): String = &quot;${getSuitEnum().name}${getRank()}&quot;&#10;&#10;    override fun equals(other: Any?): Boolean {&#10;        if (this === other) return true&#10;        if (other !is NativeCard) return false&#10;        return this.getSuit() == other.getSuit() &amp;&amp; this.getRank() == other.getRank()&#10;    }&#10;&#10;    override fun hashCode(): Int = getSuit() * 31 + getRank()&#10;&#10;    protected fun finalize() {&#10;        if (nativeHandle != 0L) {&#10;            nativeDestroy(nativeHandle)&#10;            nativeHandle = 0L&#10;        }&#10;    }&#10;&#10;    enum class Suit {&#10;        SPADES,   // S = 0&#10;        HEARTS,   // H = 1&#10;        DIAMONDS, // D = 2&#10;        CLUBS     // C = 3&#10;    }&#10;&#10;    companion object {&#10;        init {&#10;            System.loadLibrary(&quot;shkuba&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/shkuba/Board.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/shkuba/Board.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.dinari.shkuba&#10;&#10;class Board {&#10;    // Native pointer to the C++ Board instance&#10;    private var nativeHandle: Long = 0&#10;&#10;    init {&#10;        nativeHandle = nativeCreate()&#10;    }&#10;&#10;    // JNI: Create C++ Board instance&#10;    private external fun nativeCreate(): Long&#10;&#10;    // JNI: Clean up C++ Board instance&#10;    private external fun nativeDestroy(handle: Long)&#10;&#10;    // JNI: Get board size&#10;    external fun getBoardSize(): Int&#10;&#10;    // JNI: Add card to board&#10;    external fun addToBoard(suit: Int, rank: Int)&#10;&#10;    // JNI: Get all cards on board as array of [suit, rank] pairs&#10;    external fun getBoard(): IntArray&#10;&#10;    // Helper function to convert board data to Card objects&#10;    fun getBoardCards(): List&lt;Card&gt; {&#10;        val boardData = getBoard()&#10;        val cards = mutableListOf&lt;Card&gt;()&#10;        for (i in boardData.indices step 2) {&#10;            if (i + 1 &lt; boardData.size) {&#10;                cards.add(Card(boardData[i], boardData[i + 1]))&#10;            }&#10;        }&#10;        return cards&#10;    }&#10;&#10;    protected fun finalize() {&#10;        if (nativeHandle != 0L) {&#10;            nativeDestroy(nativeHandle)&#10;            nativeHandle = 0L&#10;        }&#10;    }&#10;&#10;    companion object {&#10;        init {&#10;            System.loadLibrary(&quot;shkuba&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/shkuba/GameUI.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/shkuba/GameUI.kt" />
              <option name="originalContent" value="package com.dinari.shkuba&#10;&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.interaction.MutableInteractionSource&#10;import androidx.compose.foundation.interaction.collectIsPressedAsState&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.foundation.horizontalScroll&#10;import com.dinari.shkuba.R&#10;&#10;// Data models&#10;sealed class Suit(val symbol: String) {&#10;    object Spades : Suit(&quot;♠&quot;)&#10;    object Diamonds : Suit(&quot;♦&quot;)&#10;    object Clubs : Suit(&quot;♣&quot;)&#10;    object Hearts : Suit(&quot;♥&quot;)&#10;}&#10;&#10;data class Card(val value: String, val suit: Suit) {&#10;    override fun toString(): String = &quot;$value${suit.symbol}&quot;&#10;}&#10;&#10;data class Player(val name: String, val hand: List&lt;Card&gt;)&#10;&#10;data class GameState(&#10;    val players: List&lt;Player&gt;,&#10;    val tableCards: List&lt;Card&gt;,&#10;    val currentPlayerIndex: Int&#10;)&#10;&#10;// UI Components&#10;@Composable&#10;fun CardView(&#10;    card: Card,&#10;    onClick: (() -&gt; Unit)? = null&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .size(70.dp, 100.dp),&#10;        colors = CardDefaults.cardColors(containerColor = Color.Transparent)&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.White)&#10;                .border(&#10;                    width = 1.dp,&#10;                    color = Color.Gray,&#10;                    shape = RoundedCornerShape(12.dp)&#10;                ),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.Center,&#10;                modifier = Modifier.padding(4.dp)&#10;            ) {&#10;                Text(&#10;                    text = card.value,&#10;                    style = MaterialTheme.typography.headlineMedium.copy(&#10;                        fontWeight = FontWeight.Bold,&#10;                        fontSize = 24.sp&#10;                    ),&#10;                    color = when (card.suit) {&#10;                        is Suit.Hearts, is Suit.Diamonds -&gt; Color(0xFFDC3545)&#10;                        else -&gt; Color(0xFF212529)&#10;                    }&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = card.suit.symbol,&#10;                    style = MaterialTheme.typography.titleMedium.copy(&#10;                        fontSize = 20.sp&#10;                    ),&#10;                    color = when (card.suit) {&#10;                        is Suit.Hearts, is Suit.Diamonds -&gt; Color(0xFFDC3545)&#10;                        else -&gt; Color(0xFF212529)&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GameScreen(gameState: GameState, onPlayCard: (Card) -&gt; Unit) {&#10;fun GameScreen(gameState: GameState, onPlayCard: (Card) -&gt; Unit) {&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color(0xFFE8F0FE))&#10;            .padding(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxSize(),&#10;            verticalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                &quot;Shkuba Card Game&quot;,&#10;                style = MaterialTheme.typography.headlineMedium.copy(&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 28.sp&#10;                ),&#10;                color = cardTextPrimary(),&#10;                modifier = Modifier.align(Alignment.CenterHorizontally)&#10;            )&#10;&#10;            // Table section&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 16.dp)&#10;                    .shadow(8.dp, RoundedCornerShape(16.dp)),&#10;                shape = RoundedCornerShape(16.dp),&#10;                colors = CardDefaults.cardColors(containerColor = cardSurface())&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    Text(&#10;                        &quot;Table&quot;,&#10;                        style = MaterialTheme.typography.titleLarge.copy(&#10;                            fontWeight = FontWeight.SemiBold&#10;                        ),&#10;                        color = cardTextPrimary()&#10;                    )&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .horizontalScroll(rememberScrollState()),&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        gameState.tableCards.forEach { card -&gt;&#10;                            CardView(card)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Player's hand section&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 16.dp)&#10;                    .shadow(8.dp, RoundedCornerShape(16.dp)),&#10;                shape = RoundedCornerShape(16.dp),&#10;                colors = CardDefaults.cardColors(containerColor = cardSurface())&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    Text(&#10;                        &quot;${gameState.players[gameState.currentPlayerIndex].name}'s Hand&quot;,&#10;                        style = MaterialTheme.typography.titleLarge.copy(&#10;                            fontWeight = FontWeight.SemiBold&#10;                        ),&#10;                        color = cardTextPrimary()&#10;                    )&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .horizontalScroll(rememberScrollState()),&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        gameState.players[gameState.currentPlayerIndex].hand.forEach { card -&gt;&#10;                            CardView(&#10;                                card = card,&#10;                                onClick = { onPlayCard(card) }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;@Composable&#10;fun TableView(cards: List&lt;Card&gt;) {&#10;    Column {&#10;        Text(&quot;Table:&quot;, style = MaterialTheme.typography.titleMedium)&#10;        Row {&#10;            cards.forEach { card -&gt;&#10;                CardView(card)&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PlayerHandView(player: Player, onPlayCard: (Card) -&gt; Unit) {&#10;    Column {&#10;        Text(&quot;${player.name}'s Hand:&quot;, style = MaterialTheme.typography.titleMedium)&#10;        Row {&#10;            player.hand.forEach { card -&gt;&#10;                CardView(card, onClick = { onPlayCard(card) })&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;fun TableView(cards: List&lt;Card&gt;) {&#10;    Column {&#10;        Text(&quot;Table:&quot;, style = MaterialTheme.typography.titleMedium)&#10;        Row {&#10;            cards.forEach { card -&gt;&#10;                CardView(card)&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PlayerHandView(player: Player, onPlayCard: (Card) -&gt; Unit) {&#10;    Column {&#10;        Text(&quot;${player.name}'s Hand:&quot;, style = MaterialTheme.typography.titleMedium)&#10;        Row {&#10;            player.hand.forEach { card -&gt;&#10;                CardView(card, onClick = { onPlayCard(card) })&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MainMenu(&#10;    onStartGame: () -&gt; Unit,&#10;    onOptions: () -&gt; Unit,&#10;    onExit: () -&gt; Unit,&#10;    onPvp: () -&gt; Unit,&#10;    startGameLabel: String,&#10;    optionsLabel: String,&#10;    exitLabel: String,&#10;    titleLabel: String&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        cardBackground(),&#10;                        Color(0xFFE8F0FE)&#10;                    )&#10;                )&#10;            )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth(0.8f)&#10;                .align(Alignment.Center),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                titleLabel,&#10;                style = MaterialTheme.typography.headlineLarge.copy(&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 42.sp,&#10;                    letterSpacing = (-1).sp&#10;                ),&#10;                color = cardTextPrimary()&#10;            )&#10;            Spacer(modifier = Modifier.height(48.dp))&#10;&#10;            MenuButton(&#10;                text = startGameLabel,&#10;                onClick = onStartGame,&#10;                gradient = Brush.horizontalGradient(&#10;                    colors = listOf(cardPrimary(), cardPrimaryLight())&#10;                )&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            MenuButton(&#10;                text = optionsLabel,&#10;                onClick = onOptions,&#10;                gradient = Brush.horizontalGradient(&#10;                    colors = listOf(cardAccentOrange(), cardAccentOrange().copy(alpha = 0.8f))&#10;                )&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            MenuButton(&#10;                text = exitLabel,&#10;                onClick = onExit,&#10;                gradient = Brush.horizontalGradient(&#10;                    colors = listOf(Color(0xFF6C757D), Color(0xFF495057))&#10;                )&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            MenuButton(&#10;                text = stringResource(id = R.string.pvp),&#10;                onClick = onPvp,&#10;                gradient = Brush.horizontalGradient(&#10;                    colors = listOf(cardAccentGreen(), cardAccentGreen().copy(alpha = 0.8f))&#10;                )&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MenuButton(&#10;    text: String,&#10;    onClick: () -&gt; Unit,&#10;    gradient: Brush&#10;) {&#10;    val interactionSource = remember { MutableInteractionSource() }&#10;    val isPressed by interactionSource.collectIsPressedAsState()&#10;&#10;    val scale = if (isPressed) 0.95f else 1f&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .graphicsLayer(scaleX = scale, scaleY = scale)&#10;            .fillMaxWidth()&#10;            .height(56.dp)&#10;            .background(gradient, RoundedCornerShape(28.dp))&#10;            .clickable(&#10;                interactionSource = interactionSource,&#10;                indication = null,&#10;                onClick = onClick&#10;            )&#10;            .border(&#10;                width = 1.dp,&#10;                color = Color.White.copy(alpha = 0.2f),&#10;                shape = RoundedCornerShape(28.dp)&#10;            )&#10;            .padding(8.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = text,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontWeight = FontWeight.SemiBold,&#10;                letterSpacing = 0.5.sp&#10;            ),&#10;            color = Color.White&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun InGameMenu(&#10;    onMainMenu: () -&gt; Unit,&#10;    onBackToGame: () -&gt; Unit,&#10;    onOptions: () -&gt; Unit,&#10;    mainMenuLabel: String,&#10;    backToGameLabel: String,&#10;    optionsLabel: String,&#10;    titleLabel: String&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color(0x99000000))&#10;            .clickable(&#10;                interactionSource = remember { MutableInteractionSource() },&#10;                indication = null,&#10;                onClick = onBackToGame&#10;            )&#10;    ) {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth(0.9f)&#10;                .align(Alignment.Center)&#10;                .clickable(enabled = false) { },&#10;            shape = RoundedCornerShape(24.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = cardSurface()&#10;            )&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(24.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    titleLabel,&#10;                    style = MaterialTheme.typography.headlineMedium.copy(&#10;                        fontWeight = FontWeight.Bold&#10;                    ),&#10;                    color = cardTextPrimary()&#10;                )&#10;                Spacer(modifier = Modifier.height(32.dp))&#10;&#10;                MenuButton(&#10;                    text = mainMenuLabel,&#10;                    onClick = onMainMenu,&#10;                    gradient = Brush.horizontalGradient(&#10;                        colors = listOf(cardPrimary(), cardPrimaryLight())&#10;                    )&#10;                )&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                MenuButton(&#10;                    text = optionsLabel,&#10;                    onClick = onOptions,&#10;                    gradient = Brush.horizontalGradient(&#10;                        colors = listOf(cardAccentOrange(), cardAccentOrange().copy(alpha = 0.8f))&#10;                    )&#10;                )&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                MenuButton(&#10;                    text = backToGameLabel,&#10;                    onClick = onBackToGame,&#10;                    gradient = Brush.horizontalGradient(&#10;                        colors = listOf(cardAccentGreen(), cardAccentGreen().copy(alpha = 0.8f))&#10;                    )&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun OptionsScreen(&#10;    isDarkMode: Boolean,&#10;    onToggleTheme: () -&gt; Unit,&#10;    onBack: () -&gt; Unit,&#10;    selectedLanguage: String,&#10;    onLanguageChange: (String) -&gt; Unit,&#10;    languageOptions: List&lt;String&gt;&#10;) {&#10;    val colorScheme = MaterialTheme.colorScheme&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        colorScheme.background,&#10;                        colorScheme.surface&#10;                    )&#10;                )&#10;            )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth(0.9f)&#10;                .align(Alignment.Center),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                stringResource(id = R.string.options),&#10;                style = MaterialTheme.typography.headlineLarge.copy(&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 36.sp,&#10;                    letterSpacing = (-0.5).sp&#10;                ),&#10;                color = colorScheme.onBackground&#10;            )&#10;            Spacer(modifier = Modifier.height(48.dp))&#10;&#10;            // Theme Switch&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 8.dp)&#10;                    .shadow(4.dp, RoundedCornerShape(16.dp)),&#10;                shape = RoundedCornerShape(16.dp),&#10;                colors = CardDefaults.cardColors(containerColor = colorScheme.surface)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        stringResource(id = R.string.dark_mode),&#10;                        style = MaterialTheme.typography.titleMedium.copy(&#10;                            fontWeight = FontWeight.SemiBold&#10;                        ),&#10;                        color = colorScheme.onSurface&#10;                    )&#10;                    Switch(&#10;                        checked = isDarkMode,&#10;                        onCheckedChange = { onToggleTheme() },&#10;                        colors = SwitchDefaults.colors(&#10;                            checkedThumbColor = colorScheme.primary,&#10;                            checkedTrackColor = colorScheme.primary.copy(alpha = 0.5f),&#10;                            uncheckedThumbColor = Color.Gray,&#10;                            uncheckedTrackColor = Color.LightGray&#10;                        )&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Language Selection&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 8.dp)&#10;                    .shadow(4.dp, RoundedCornerShape(16.dp)),&#10;                shape = RoundedCornerShape(16.dp),&#10;                colors = CardDefaults.cardColors(containerColor = colorScheme.surface)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    Text(&#10;                        stringResource(id = R.string.language),&#10;                        style = MaterialTheme.typography.titleMedium.copy(&#10;                            fontWeight = FontWeight.SemiBold&#10;                        ),&#10;                        color = colorScheme.onSurface&#10;                    )&#10;                    languageOptions.forEach { lang -&gt;&#10;                        val isSelected = lang == selectedLanguage&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(48.dp)&#10;                                .background(&#10;                                    if (isSelected) colorScheme.primary else Color.Transparent,&#10;                                    RoundedCornerShape(24.dp)&#10;                                )&#10;                                .border(&#10;                                    width = 1.dp,&#10;                                    color = if (isSelected) colorScheme.primary else colorScheme.outline,&#10;                                    shape = RoundedCornerShape(24.dp)&#10;                                )&#10;                                .clickable { onLanguageChange(lang) }&#10;                                .padding(horizontal = 16.dp),&#10;                            contentAlignment = Alignment.CenterStart&#10;                        ) {&#10;                            Text(&#10;                                lang,&#10;                                color = if (isSelected) colorScheme.onPrimary else colorScheme.onSurface,&#10;                                style = MaterialTheme.typography.bodyLarge.copy(&#10;                                    fontWeight = if (isSelected) FontWeight.SemiBold else FontWeight.Normal&#10;                                )&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            MenuButton(&#10;                text = stringResource(id = R.string.back),&#10;                onClick = onBack,&#10;                gradient = Brush.horizontalGradient(&#10;                    colors = listOf(colorScheme.secondary, colorScheme.secondary.copy(alpha = 0.8f))&#10;                )&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun cardTextPrimary() = MaterialTheme.colorScheme.onSurface&#10;@Composable&#10;fun cardSurface() = MaterialTheme.colorScheme.surface&#10;@Composable&#10;fun cardBackground() = MaterialTheme.colorScheme.background&#10;@Composable&#10;fun cardPrimary() = MaterialTheme.colorScheme.primary&#10;@Composable&#10;fun cardPrimaryLight() = MaterialTheme.colorScheme.primaryContainer&#10;@Composable&#10;fun cardAccentOrange() = MaterialTheme.colorScheme.secondary&#10;@Composable&#10;fun cardAccentGreen() = MaterialTheme.colorScheme.tertiary&#10;" />
              <option name="updatedContent" value="package com.dinari.shkuba&#10;&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.interaction.MutableInteractionSource&#10;import androidx.compose.foundation.interaction.collectIsPressedAsState&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.foundation.horizontalScroll&#10;import com.dinari.shkuba.R&#10;&#10;// Data models&#10;sealed class Suit(val symbol: String) {&#10;    object Spades : Suit(&quot;♠&quot;)&#10;    object Diamonds : Suit(&quot;♦&quot;)&#10;    object Clubs : Suit(&quot;♣&quot;)&#10;    object Hearts : Suit(&quot;♥&quot;)&#10;}&#10;&#10;data class CardGui(val value: String, val suit: Suit) {&#10;    override fun toString(): String = &quot;$value${suit.symbol}&quot;&#10;}&#10;&#10;data class Player(val name: String, val hand: List&lt;CardGui&gt;)&#10;&#10;data class GameState(&#10;    val players: List&lt;Player&gt;,&#10;    val tableCards: List&lt;CardGui&gt;,&#10;    val currentPlayerIndex: Int&#10;)&#10;&#10;// UI Components&#10;@Composable&#10;fun CardView(&#10;    card: CardGui,&#10;    onClick: (() -&gt; Unit)? = null&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .size(70.dp, 100.dp)&#10;            .clickable(enabled = onClick != null) { onClick?.invoke() },&#10;        shape = RoundedCornerShape(12.dp),&#10;        colors = CardDefaults.cardColors(containerColor = Color.Transparent)&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.White)&#10;                .border(&#10;                    width = 1.dp,&#10;                    color = Color.Gray,&#10;                    shape = RoundedCornerShape(12.dp)&#10;                ),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.Center,&#10;                modifier = Modifier.padding(4.dp)&#10;            ) {&#10;                Text(&#10;                    text = card.value,&#10;                    style = MaterialTheme.typography.headlineMedium.copy(&#10;                        fontWeight = FontWeight.Bold,&#10;                        fontSize = 24.sp&#10;                    ),&#10;                    color = when (card.suit) {&#10;                        is Suit.Hearts, is Suit.Diamonds -&gt; Color(0xFFDC3545)&#10;                        else -&gt; Color(0xFF212529)&#10;                    }&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = card.suit.symbol,&#10;                    style = MaterialTheme.typography.titleMedium.copy(&#10;                        fontSize = 20.sp&#10;                    ),&#10;                    color = when (card.suit) {&#10;                        is Suit.Hearts, is Suit.Diamonds -&gt; Color(0xFFDC3545)&#10;                        else -&gt; Color(0xFF212529)&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GameScreen(gameState: GameState, onPlayCard: (CardGui) -&gt; Unit) {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color(0xFFE8F0FE))&#10;            .padding(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxSize(),&#10;            verticalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                &quot;Shkuba Card Game&quot;,&#10;                style = MaterialTheme.typography.headlineMedium.copy(&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 28.sp&#10;                ),&#10;                color = cardTextPrimary(),&#10;                modifier = Modifier.align(Alignment.CenterHorizontally)&#10;            )&#10;&#10;            // Table section&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 16.dp)&#10;                    .shadow(8.dp, RoundedCornerShape(16.dp)),&#10;                shape = RoundedCornerShape(16.dp),&#10;                colors = CardDefaults.cardColors(containerColor = cardSurface())&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    Text(&#10;                        &quot;Table&quot;,&#10;                        style = MaterialTheme.typography.titleLarge.copy(&#10;                            fontWeight = FontWeight.SemiBold&#10;                        ),&#10;                        color = cardTextPrimary()&#10;                    )&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .horizontalScroll(rememberScrollState()),&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        gameState.tableCards.forEach { card -&gt;&#10;                            CardView(card)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Player's hand section&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 16.dp)&#10;                    .shadow(8.dp, RoundedCornerShape(16.dp)),&#10;                shape = RoundedCornerShape(16.dp),&#10;                colors = CardDefaults.cardColors(containerColor = cardSurface())&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    Text(&#10;                        &quot;${gameState.players[gameState.currentPlayerIndex].name}'s Hand&quot;,&#10;                        style = MaterialTheme.typography.titleLarge.copy(&#10;                            fontWeight = FontWeight.SemiBold&#10;                        ),&#10;                        color = cardTextPrimary()&#10;                    )&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .horizontalScroll(rememberScrollState()),&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        gameState.players[gameState.currentPlayerIndex].hand.forEach { card -&gt;&#10;                            CardView(&#10;                                card = card,&#10;                                onClick = { onPlayCard(card) }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MainMenu(&#10;    onStartGame: () -&gt; Unit,&#10;    onOptions: () -&gt; Unit,&#10;    onExit: () -&gt; Unit,&#10;    onPvp: () -&gt; Unit,&#10;    startGameLabel: String,&#10;    optionsLabel: String,&#10;    exitLabel: String,&#10;    titleLabel: String&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        cardBackground(),&#10;                        Color(0xFFE8F0FE)&#10;                    )&#10;                )&#10;            )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth(0.8f)&#10;                .align(Alignment.Center),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                titleLabel,&#10;                style = MaterialTheme.typography.headlineLarge.copy(&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 42.sp,&#10;                    letterSpacing = (-1).sp&#10;                ),&#10;                color = cardTextPrimary()&#10;            )&#10;            Spacer(modifier = Modifier.height(48.dp))&#10;&#10;            MenuButton(&#10;                text = startGameLabel,&#10;                onClick = onStartGame,&#10;                gradient = Brush.horizontalGradient(&#10;                    colors = listOf(cardPrimary(), cardPrimaryLight())&#10;                )&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            MenuButton(&#10;                text = optionsLabel,&#10;                onClick = onOptions,&#10;                gradient = Brush.horizontalGradient(&#10;                    colors = listOf(cardAccentOrange(), cardAccentOrange().copy(alpha = 0.8f))&#10;                )&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            MenuButton(&#10;                text = exitLabel,&#10;                onClick = onExit,&#10;                gradient = Brush.horizontalGradient(&#10;                    colors = listOf(Color(0xFF6C757D), Color(0xFF495057))&#10;                )&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            MenuButton(&#10;                text = stringResource(id = R.string.pvp),&#10;                onClick = onPvp,&#10;                gradient = Brush.horizontalGradient(&#10;                    colors = listOf(cardAccentGreen(), cardAccentGreen().copy(alpha = 0.8f))&#10;                )&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MenuButton(&#10;    text: String,&#10;    onClick: () -&gt; Unit,&#10;    gradient: Brush&#10;) {&#10;    val interactionSource = remember { MutableInteractionSource() }&#10;    val isPressed by interactionSource.collectIsPressedAsState()&#10;&#10;    val scale = if (isPressed) 0.95f else 1f&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .graphicsLayer(scaleX = scale, scaleY = scale)&#10;            .fillMaxWidth()&#10;            .height(56.dp)&#10;            .background(gradient, RoundedCornerShape(28.dp))&#10;            .clickable(&#10;                interactionSource = interactionSource,&#10;                indication = null,&#10;                onClick = onClick&#10;            )&#10;            .border(&#10;                width = 1.dp,&#10;                color = Color.White.copy(alpha = 0.2f),&#10;                shape = RoundedCornerShape(28.dp)&#10;            )&#10;            .padding(8.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = text,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontWeight = FontWeight.SemiBold,&#10;                letterSpacing = 0.5.sp&#10;            ),&#10;            color = Color.White&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun InGameMenu(&#10;    onMainMenu: () -&gt; Unit,&#10;    onBackToGame: () -&gt; Unit,&#10;    onOptions: () -&gt; Unit,&#10;    mainMenuLabel: String,&#10;    backToGameLabel: String,&#10;    optionsLabel: String,&#10;    titleLabel: String&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color(0x99000000))&#10;            .clickable(&#10;                interactionSource = remember { MutableInteractionSource() },&#10;                indication = null,&#10;                onClick = onBackToGame&#10;            )&#10;    ) {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth(0.9f)&#10;                .align(Alignment.Center)&#10;                .clickable(enabled = false) { },&#10;            shape = RoundedCornerShape(24.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = cardSurface()&#10;            )&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(24.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    titleLabel,&#10;                    style = MaterialTheme.typography.headlineMedium.copy(&#10;                        fontWeight = FontWeight.Bold&#10;                    ),&#10;                    color = cardTextPrimary()&#10;                )&#10;                Spacer(modifier = Modifier.height(32.dp))&#10;&#10;                MenuButton(&#10;                    text = mainMenuLabel,&#10;                    onClick = onMainMenu,&#10;                    gradient = Brush.horizontalGradient(&#10;                        colors = listOf(cardPrimary(), cardPrimaryLight())&#10;                    )&#10;                )&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                MenuButton(&#10;                    text = optionsLabel,&#10;                    onClick = onOptions,&#10;                    gradient = Brush.horizontalGradient(&#10;                        colors = listOf(cardAccentOrange(), cardAccentOrange().copy(alpha = 0.8f))&#10;                    )&#10;                )&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                MenuButton(&#10;                    text = backToGameLabel,&#10;                    onClick = onBackToGame,&#10;                    gradient = Brush.horizontalGradient(&#10;                        colors = listOf(cardAccentGreen(), cardAccentGreen().copy(alpha = 0.8f))&#10;                    )&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun OptionsScreen(&#10;    isDarkMode: Boolean,&#10;    onToggleTheme: () -&gt; Unit,&#10;    onBack: () -&gt; Unit,&#10;    selectedLanguage: String,&#10;    onLanguageChange: (String) -&gt; Unit,&#10;    languageOptions: List&lt;String&gt;&#10;) {&#10;    val colorScheme = MaterialTheme.colorScheme&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        colorScheme.background,&#10;                        colorScheme.surface&#10;                    )&#10;                )&#10;            )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth(0.9f)&#10;                .align(Alignment.Center),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                stringResource(id = R.string.options),&#10;                style = MaterialTheme.typography.headlineLarge.copy(&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 36.sp,&#10;                    letterSpacing = (-0.5).sp&#10;                ),&#10;                color = colorScheme.onBackground&#10;            )&#10;            Spacer(modifier = Modifier.height(48.dp))&#10;&#10;            // Theme Switch&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 8.dp)&#10;                    .shadow(4.dp, RoundedCornerShape(16.dp)),&#10;                shape = RoundedCornerShape(16.dp),&#10;                colors = CardDefaults.cardColors(containerColor = colorScheme.surface)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        stringResource(id = R.string.dark_mode),&#10;                        style = MaterialTheme.typography.titleMedium.copy(&#10;                            fontWeight = FontWeight.SemiBold&#10;                        ),&#10;                        color = colorScheme.onSurface&#10;                    )&#10;                    Switch(&#10;                        checked = isDarkMode,&#10;                        onCheckedChange = { onToggleTheme() },&#10;                        colors = SwitchDefaults.colors(&#10;                            checkedThumbColor = colorScheme.primary,&#10;                            checkedTrackColor = colorScheme.primary.copy(alpha = 0.5f),&#10;                            uncheckedThumbColor = Color.Gray,&#10;                            uncheckedTrackColor = Color.LightGray&#10;                        )&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Language Selection&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 8.dp)&#10;                    .shadow(4.dp, RoundedCornerShape(16.dp)),&#10;                shape = RoundedCornerShape(16.dp),&#10;                colors = CardDefaults.cardColors(containerColor = colorScheme.surface)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    Text(&#10;                        stringResource(id = R.string.language),&#10;                        style = MaterialTheme.typography.titleMedium.copy(&#10;                            fontWeight = FontWeight.SemiBold&#10;                        ),&#10;                        color = colorScheme.onSurface&#10;                    )&#10;                    languageOptions.forEach { lang -&gt;&#10;                        val isSelected = lang == selectedLanguage&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(48.dp)&#10;                                .background(&#10;                                    if (isSelected) colorScheme.primary else Color.Transparent,&#10;                                    RoundedCornerShape(24.dp)&#10;                                )&#10;                                .border(&#10;                                    width = 1.dp,&#10;                                    color = if (isSelected) colorScheme.primary else colorScheme.outline,&#10;                                    shape = RoundedCornerShape(24.dp)&#10;                                )&#10;                                .clickable { onLanguageChange(lang) }&#10;                                .padding(horizontal = 16.dp),&#10;                            contentAlignment = Alignment.CenterStart&#10;                        ) {&#10;                            Text(&#10;                                lang,&#10;                                color = if (isSelected) colorScheme.onPrimary else colorScheme.onSurface,&#10;                                style = MaterialTheme.typography.bodyLarge.copy(&#10;                                    fontWeight = if (isSelected) FontWeight.SemiBold else FontWeight.Normal&#10;                                )&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            MenuButton(&#10;                text = stringResource(id = R.string.back),&#10;                onClick = onBack,&#10;                gradient = Brush.horizontalGradient(&#10;                    colors = listOf(colorScheme.secondary, colorScheme.secondary.copy(alpha = 0.8f))&#10;                )&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun cardTextPrimary() = MaterialTheme.colorScheme.onSurface&#10;@Composable&#10;fun cardSurface() = MaterialTheme.colorScheme.surface&#10;@Composable&#10;fun cardBackground() = MaterialTheme.colorScheme.background&#10;@Composable&#10;fun cardPrimary() = MaterialTheme.colorScheme.primary&#10;@Composable&#10;fun cardPrimaryLight() = MaterialTheme.colorScheme.primaryContainer&#10;@Composable&#10;fun cardAccentOrange() = MaterialTheme.colorScheme.secondary&#10;@Composable&#10;fun cardAccentGreen() = MaterialTheme.colorScheme.tertiary" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.gradle.kts" />
              <option name="originalContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.kotlin.android) apply false&#10;    alias(libs.plugins.kotlin.compose) apply false&#10;&#10;    id(&quot;com.google.gms.google-services&quot;) version &quot;4.4.3&quot; apply false&#10;}&#10;&#10;allprojects {&#10;    repositories {&#10;        google()&#10;        mavenCentral()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.kotlin.android) apply false&#10;    alias(libs.plugins.kotlin.compose) apply false&#10;&#10;    id(&quot;com.google.gms.google-services&quot;) version &quot;4.4.3&quot; apply false&#10;}&#10;&#10;allprojects {&#10;    repositories {&#10;        // Removed repository declarations to avoid conflict with settings.gradle.kts&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/settings.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/settings.gradle.kts" />
              <option name="originalContent" value="pluginManagement {&#10;    repositories {&#10;        google {&#10;            content {&#10;                includeGroupByRegex(&quot;com\\.android.*&quot;)&#10;                includeGroupByRegex(&quot;com\\.google.*&quot;)&#10;                includeGroupByRegex(&quot;androidx.*&quot;)&#10;            }&#10;        }&#10;        mavenCentral()&#10;        gradlePluginPortal()&#10;    }&#10;}&#10;dependencyResolutionManagement {&#10;    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)&#10;    repositories {&#10;        google()&#10;        mavenCentral()&#10;    }&#10;}&#10;&#10;rootProject.name = &quot;shkuba&quot;&#10;include(&quot;:app&quot;)&#10; " />
              <option name="updatedContent" value="pluginManagement {&#10;    repositories {&#10;        google {&#10;            content {&#10;                includeGroupByRegex(&quot;com\\.android.*&quot;)&#10;                includeGroupByRegex(&quot;com\\.google.*&quot;)&#10;                includeGroupByRegex(&quot;androidx.*&quot;)&#10;            }&#10;        }&#10;        mavenCentral()&#10;        gradlePluginPortal()&#10;    }&#10;}&#10;dependencyResolutionManagement {&#10;    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)&#10;    repositories {&#10;        google()&#10;        mavenCentral()&#10;    }&#10;}&#10;&#10;rootProject.name = &quot;shkuba&quot;&#10;include(&quot;:app&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>